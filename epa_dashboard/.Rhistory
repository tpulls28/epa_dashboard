install.packages("markdown")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
install.packages("readr")
library(readr)
install.packages("dplyr")
Test_import <- read_csv("R_Practice/Test_import.csv")
View(Test_import)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
View(Test_import)
View(Test_import2)
View(Test_import)
f <- function(x, pos) print(x$Dogs)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) print(x['Dogs'])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import)
f <- function(x, pos) print(x[,5])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
cbind(Test_import$Dogs, Test_import2)
View(Test_import)
Test_import[,Test_import[,3] =="LA"]
class(Test_import)
typeof(Test_import)
library(filter)
library(dplyr)
filter(Test_import, State == "LA")
filter(Test_import, State == "BA")
f <- function(x, pos) filter(x, State == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "NM")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
getwd()
setwd("C:/Users/Derek/Documents/GitHub")
setwd("C:/Users/Derek/Documents/GitHub/sonoma_dashboard")
getwd()
list.file()
list.files()
getwd()
setwd("C:/Users/Derek/Documents/GitHub/sonoma_dashboard/sonoma_dashboard")
list.files()
rm(list = ls())
shiny::runApp()
library(shiny)
library(googlesheets)
getwd()
getwd(0)
getwd()
sheet_url <- "https://docs.google.com/spreadsheets/d/1qBAz09Ro3zoqKQRehRM4T8ntjFyaE_-wXuVW88cW45Q/"
parcel_proposals <- gs_url(sheet_url) %>% gs_read("sonoma_work", range = "A1:N5052")
library(dplyr)
sheet_url <- "https://docs.google.com/spreadsheets/d/1qBAz09Ro3zoqKQRehRM4T8ntjFyaE_-wXuVW88cW45Q/"
parcel_proposals <- gs_url(sheet_url) %>% gs_read("sonoma_work", range = "A1:N5052")
# Right now the Sonoma dashboard will use the EPA analysis done by Jacob as an example. I will have to reverse geocode at some point.
library(googlesheets)
parcel_proposals <- gs_url(sheet_url) %>% gs_read("sonoma_work", range = "A1:N5052")
parcel_data <- parcel_proposals
rm(parcel_proposals)
# Filter out missing data.
parcel_data <- parcel_data[complete.cases(parcel_data$area_m2),]
View(parcel_data)
save(parcel_data, file = "parcel_data.RData")
load("parcel_data.RData")
rm(list = ls())
load("parcel_data.RData")
View(parcel_data)
shiny::runApp()
runApp()
View(parcel_data)
install.packages("revgeo")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runGitHub("sonoma_dashboard", "citysystems")
runGitHub("sonoma_dashboard/sonoma_dashboard", "citysystems", )
runGitHub("sonoma_dashboard/sonoma_dashboard", "citysystems")
runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
runGitHub("sonoma_dashboard/sonoma_dashboard", "citysystems")
runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
load("parcel_data.RData")
shiny::runApp()
runApp()
View(parcel_data.shape)
View(parcel_data.shape@data)
class(parcel_data.shape@data$address)
parcel_data.shape@data$address <- unlist(parcel_data.shape@data$address)
parcel_data.shape@data$address
class(parcel_data.shape@data$address)
save(parcel_data, file = "parcel_data.RData")
load("parcel_data.RData")
class(parcel_data.shape@data$address)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filter(parcel_data.shape@data, address == "2896 Illinois St, East Palo Alto, CA 94303, USA")$address[1]
filter(parcel_data.shape@data, address == "2896 Illinois St, East Palo Alto, CA 94303, USA")$adu_type[1]
filter(parcel_data.shape@data, address == "2870 Fordham St, East Palo Alto, CA 94303, USA")$adu_type[1]
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\pre_processing")
rm(list = ls())
load(".RData")
View(parcel_centers.coords)
parcel_data.shape <- data.shape
parcel_data.shape@data <- parcel_data.shape@data %>% subset(select = APN)
# parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(y = {subset(parcel_centers.coords, select = c(APN, address))}, by = "APN") # Good to remember but I actually need the centroids for the map.
parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(parcel_centers.coords, by = "APN")
View(parcel_data.shape@data)
save(parcel_data.shape, file = "parcel_data.RData")
save.image()
# Can be used to run a shiny app from a GitHub repo
# runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\sonoma_dashboard")
rm(list = ls())
load("parcel_data.RData")
load(".RData")
rm(list = ls())
load("parcel_data.RData")
load(".RData")
View(parcel_data.shape@data)
runApp()
runApp()
runApp()
