install.packages("markdown")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
install.packages("readr")
library(readr)
install.packages("dplyr")
Test_import <- read_csv("R_Practice/Test_import.csv")
View(Test_import)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
View(Test_import)
View(Test_import2)
View(Test_import)
f <- function(x, pos) print(x$Dogs)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) print(x['Dogs'])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import)
f <- function(x, pos) print(x[,5])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
cbind(Test_import$Dogs, Test_import2)
View(Test_import)
Test_import[,Test_import[,3] =="LA"]
class(Test_import)
typeof(Test_import)
library(filter)
library(dplyr)
filter(Test_import, State == "LA")
filter(Test_import, State == "BA")
f <- function(x, pos) filter(x, State == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "NM")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
install.packages(c("fansi", "foreign", "MASS", "mgcv", "rgdal", "scales", "stringi", "survival"))
install.packages("installr")
library(installr)
updateR()
version
library(installr)
library(installr)
updateR()
install.packages(c("fansi", "stringi"))
getwd()
version
install.packages(c("httr", "jsonlite"))
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
response <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
?content
results  <- fromJSON(content(response, 'text'))
View(results)
results$info$took
rm(list(Test_import,Test_import2))
rm(list("Test_import","Test_import2"))
rm(c(Test_import, Test_import2))
rm(c("Test_import", "Test_import2"))
rm(Test_import)
rm(Test_import2)
setwd("C:\\Users\\Derek\\Documents\\CS_work\\graphhopper_R_practice")
library(rbenchmark)
benchmark({
response <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
results  <- fromJSON(content(response, 'text'))}
replications = 1)
benchmark({
response <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
results  <- fromJSON(content(response, 'text'))}
replications = 1)
benchmark({
response <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
results  <- fromJSON(content(response, 'text'))}
replications = 1)
results <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()
results  <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()
GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()
library(dplyr)
results  <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()
benchmark({
response <- GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695")
results  <- fromJSON(content(response, 'text'))}
replications = 1)
results$paths$distance
2208.183/1000
benchmark({GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()}, replications = 100)
benchmark({GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()}, replications = 100)
0.83/100
benchmark({GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()}, replications = 1000)
7.11/1000
benchmark({GET("http://localhost:8989/route?point=52.52583%2C13.388214&point=52.512356%2C13.384695") %>% content("text") %>% fromJSON()}, replications = 10000)
66.78/10000
1/0.006678
1/0.006678
2700*197
300*197
531900*4
2700*197*4
2700*197*4
2700*197*4*0.006678
2700*197*4*0.006678/60
2700*197*4*0.006678/3600
rm(list = ls())
# Can be used to run a shiny app from a GitHub repo
# runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\sonoma_dashboard")
shiny::runApp()
load("parcel_data.RData")
load(".RData")
class(parcel_data.shape)
source('~/GitHub/sonoma_dashboard/sonoma_dashboard/make_map.R', echo=TRUE)
make_map(parcel_data.shape)
library(leaflet)
make_map(parcel_data.shape)
source('~/GitHub/sonoma_dashboard/sonoma_dashboard/make_map.R', echo=TRUE)
make_map(parcel_data.shape)
make_map(parcel_data.shape[1,])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
make_map(parcel_data.shape[13,])
make_map(parcel_data.shape[17,])
source('~/GitHub/sonoma_dashboard/sonoma_dashboard/make_map.R', echo=TRUE)
make_map(parcel_data.shape[17,])
which(parcel_data.shape@data$adu_type == "none")
which(parcel_data.shape@data$adu_type == "noney")
which(parcel_data.shape@data$adu_type == "none")
make_map(parcel_data.shape[which(parcel_data.shape@data$adu_type == "none"),])
class(arcel_data.shape@data$address)
class(parcel_data.shape@data$address)
runApp()
runApp()
unique(parcel_data.shape@data$adu_type)
readChar("./detached_message.txt", file.info("./detached_message.txt)$size)
readChar("./detached_message.txt", file.info("./detached_message.txt)$size))
readChar("./detached_message.txt", file.info("./detached_message.txt")$size)
readChar("./messages/detached_message.txt", file.info("./messages/detached_message.txt")$size)
source('~/GitHub/sonoma_dashboard/sonoma_dashboard/gen_report.R', echo=TRUE)
gen_report('detached')
source('~/GitHub/sonoma_dashboard/sonoma_dashboard/gen_report.R', echo=TRUE)
lapply(gen_report, unique(parcel_data.shape@data$adu_type))
unique(parcel_data.shape@data$adu_type)
?lapply
lapply(unique(parcel_data.shape@data$adu_type), gen_report)
lapply(unique(parcel_data.shape@data$adu_type), gen_report)
runApp()
runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
runApp()
getwd()
save.image()
rm()
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\pre_processing")
rm(list = ls())
load(".RData")
key <- "AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU"
source('~/GitHub/sonoma_dashboard/pre_processing/secret_key_finder.R', echo=TRUE)
key <- "AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU"
key == secret_key_finder()
rm(key)
save.image(0)
save.image()
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\sonoma_dashboard")
load(".RData")
load("parcel_data.RData")
runApp()
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\pre_processing")
load(".RData")
View(adu_type)
View(address_finder)
View(address_finder)
View(adu_type)
View(adu_type)
View(parcel_data)
dim(View(parcel_data.shape@data))
dim((parcel_data.shape@data))
adu_type <- function(area) {
if (area > 7500) {
return("detached")
} else if (area > 5500) {
return("attached")
} else {
return("none")
}
}
parcel_data$adu_type <- unlist(lapply(parcel_data$area_sqf, adu_type))
parcel_data.shape <- data.shape
parcel_data.shape@data <- parcel_data.shape@data %>% subset(select = APN)
# parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(y = {subset(parcel_centers.coords, select = c(APN, address))}, by = "APN") # Good to remember but I actually need the centroids for the map.
parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(parcel_centers.coords, by = "APN")
View(parcel_data.shape@data)
dim((parcel_data.shape@data))
save(parcel_data.shape, file = "parcel_data.RData")
save.image()
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\sonoma_dashboard")
load(".RData")
load("parcel_data.RData")
View(parcel_data.shape@data)
runApp()
runApp()
runGitHub("sonoma_dashboard", "citysystems", subdir = "sonoma_dashboard")
runApp()
runApp('~/GitHub/epa_dashboard/epa_dashboard')
runApp('~/GitHub/epa_dashboard/epa_dashboard')
runGitHub("epa_dashboard", "citysystems", subdir = "epa_dashboard")
# Can be used to run a shiny app from a GitHub repo
# runGitHub("epa_dashboard", "citysystems", subdir = "epa_dashboard")
# setwd("C:\\Users\\Derek\\Documents\\GitHub\\epa_dashboard\\epa_dashboard")
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\epa_dashboard\\epa_dashboard")
load(".RData")
load("parcel_data.RData")
