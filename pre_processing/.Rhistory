install.packages("markdown")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
install.packages("readr")
library(readr)
install.packages("dplyr")
Test_import <- read_csv("R_Practice/Test_import.csv")
View(Test_import)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2)
f <- function(x, pos) print(pos)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
View(Test_import)
View(Test_import2)
View(Test_import)
f <- function(x, pos) print(x$Dogs)
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) print(x['Dogs'])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import)
f <- function(x, pos) print(x[,5])
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
cbind(Test_import$Dogs, Test_import2)
View(Test_import)
Test_import[,Test_import[,3] =="LA"]
class(Test_import)
typeof(Test_import)
library(filter)
library(dplyr)
filter(Test_import, State == "LA")
filter(Test_import, State == "BA")
f <- function(x, pos) filter(x, State == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "NM")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readr)
library(dplyr)
# Chunk 3
Test_import <- read_csv("R_Practice/Test_import.csv")
# Chunk 4
f <- function(x, pos) filter(x, x[,3] == "LA")
Test_import2 <- read_delim_chunked("R_Practice/Test_import.csv", DataFrameCallback$new(f), chunk_size = 2, delim = ",")
# Chunk 5
View(Test_import2)
install.packages(c("fansi", "foreign", "MASS", "mgcv", "rgdal", "scales", "stringi", "survival"))
install.packages("installr")
library(installr)
updateR()
version
library(installr)
library(installr)
updateR()
install.packages(c("fansi", "stringi"))
getwd()
version
install.packages("RgoogleMaps")
setwd("C:\\Users\\Derek\\Documents\\CS_work\\geocoder")
knitr::opts_chunk$set(echo = TRUE)
library(rgooglemaps)
library(RgoogleMaps)
library(RJSONIO)
library(RCurl)
getGeoData <- function(location){
location <- gsub(' ','+',location)
geo_data <- getURL(paste("https://maps.googleapis.com/maps/api/geocode/json?address=",location,"&key=AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU", sep=""))
raw_data_2 <- fromJSON(geo_data)
return(raw_data_2)
}
getwd()
rm(list = ls())
test <- getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")
getGeoData <- function(location){
location <- gsub(' ','+',location)
geo_data <- getURL(paste("https://maps.googleapis.com/maps/api/geocode/json?address=",location,"&key=AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU", sep=""))
raw_data_2 <- fromJSON(geo_data)
return(raw_data_2)
}
test <- getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")
test
test$results
class(test$results)
names(test$results)
test$results[[1]]
test$results[[1]]$formatted_address
test$results[[1]]$plus_code
View(test$results)
test$results[[1]]$geometry$location
class(test$results[[1]]$geometry$location)
type(test$results[[1]]$geometry$location)
typeof(test$results[[1]]$geometry$location)
length(test$results[[1]]$geometry$location)
400/4000
0.1*60
library(readr)
library(rbenchmark)
benchmark({getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")}, replications = 5)
0.59/5
benchmark({getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")}, replications = 10)
1.12/10
addrs <- read_csv("addresses_only.csv")
View(addrs)
addrs <- read_csv("addresses_only.csv")
View(addrs)
test$results[[1]]$geometry$location
test$results[[1]]$geometry$location
# modified to return the vector of lat long
getGeoData <- function(location){
location <- gsub(' ','+',location)
geo_data <- getURL(paste("https://maps.googleapis.com/maps/api/geocode/json?address=",location,"&key=AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU", sep=""))
raw_data_2 <- fromJSON(geo_data)
# return(raw_data_2)
return(raw_data_2$results[[1]]$geometry$location)
}
getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")
?lapply
View(addrs)
geocodes <- lapply(addrs$service_address, getGeoData)
geocodes <- data.frame("geocode" = rep(NA, nrow(addrs)))
geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
View(geocodes)
# modified to return the vector of lat long
getGeoData <- function(location){
location <- gsub(' ','+',location)
geo_data <- getURL(paste("https://maps.googleapis.com/maps/api/geocode/json?address=",location,"&key=AIzaSyDkJJ2brMHagmb2mmOGNXQgkT71QUwRLgU", sep=""))
raw_data_2 <- fromJSON(geo_data)
return(raw_data_2)
# Sys.sleep()
# return(raw_data_2$results[[1]]$geometry$location)
}
test <- getGeoData("325 Sharon Park Dr. Menlo Park CA 94025")
test$status
temp <- getGeoData(addrs$service_address[1]
temp <- getGeoData(addrs$service_address[1])
temp$status
temp$status == "OK"
temp$results[[1]]$geometry$location
temp$results[[1]]$geometry$location[[1]]
temp$results[[1]]$geometry$location[[2]]
print(paste(i, temp$status))
i = 1
print(paste(i, temp$status))
rm(i)
geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
for (i in 1:nrow(addrs)) {
temp <- getGeoData(addrs$service_address[i])
print(paste(i, temp$status))
if (temp$status == "OK") {
geocodes$lat[i] <- temp$results[[1]]$geometry$location[[1]]
geocodes$lng[i] <- temp$results[[1]]$geometry$location[[2]]
} else {
geocodes$lat[i] <- NA
geocodes$lng[i] <- NA
}
}
View(cbind(addrs, geocodes))
# geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
for (i in 204) {
temp <- getGeoData(addrs$service_address[i])
print(paste(i, temp$status))
if (temp$status == "OK") {
geocodes$lat[i] <- temp$results[[1]]$geometry$location[[1]]
geocodes$lng[i] <- temp$results[[1]]$geometry$location[[2]]
} else {
geocodes$lat[i] <- NA
geocodes$lng[i] <- NA
}
}
# geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
for (i in 239) {
temp <- getGeoData(addrs$service_address[i])
print(paste(i, temp$status))
if (temp$status == "OK") {
geocodes$lat[i] <- temp$results[[1]]$geometry$location[[1]]
geocodes$lng[i] <- temp$results[[1]]$geometry$location[[2]]
} else {
geocodes$lat[i] <- NA
geocodes$lng[i] <- NA
}
}
# geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
for (i in 290) {
temp <- getGeoData(addrs$service_address[i])
print(paste(i, temp$status))
if (temp$status == "OK") {
geocodes$lat[i] <- temp$results[[1]]$geometry$location[[1]]
geocodes$lng[i] <- temp$results[[1]]$geometry$location[[2]]
} else {
geocodes$lat[i] <- NA
geocodes$lng[i] <- NA
}
}
# geocodes <- data.frame("lat" = rep(NA, nrow(addrs)), "lng" = rep(NA, nrow(addrs)))
for (i in 310) {
temp <- getGeoData(addrs$service_address[i])
print(paste(i, temp$status))
if (temp$status == "OK") {
geocodes$lat[i] <- temp$results[[1]]$geometry$location[[1]]
geocodes$lng[i] <- temp$results[[1]]$geometry$location[[2]]
} else {
geocodes$lat[i] <- NA
geocodes$lng[i] <- NA
}
}
geocoded_addrs <- cbind(addrs, geocodes)
View(geocoded_addrs)
write_csv(geocoded_addrs, "geocoded_addrs.csv")
getwd(0)
getwd()
save.image()
getwd()
rm(list = ls())
setwd("C:\\Users\\Derek\\Documents\\GitHub\\sonoma_dashboard\\pre_processing")
load(".RData")
library(googlesheets)
library(dplyr)
library(revgeo)
library(rgdal)
library(sp)
library(leaflet)
library(rgeos)
library(rbenchmark)
View(parcel_centers.coords)
View(parcel_data)
parcel_data$area_sqf <- parcel_data$area_m2*10.7639
adu_type <- function(area) {
if (area > 7500) {
return("detached")
} else if (area > 5400) {
return("attached")
} else {
return("none")
}
}
parcel_data$adu_type <- unlist(lapply(parcel_data$area_sqf, adu_type))
View(parcel_data)
dim(data.shape)
View(data.shape@data)
parcel_data.shape <- data.shape
parcel_data.shape
dim(parcel_data.shape)
parcel_data.shape@data <- parcel_data.shape@data %>% subset(select = APN)
View(parcel_data.shape@data)
parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN")
View(parcel_data.shape@data)
plot(parcel_centers.shape)
plot(data.shape)
plot(parcel_data.shape)
plot(parcel_data.shape)
save(parcel_data, file = "parcel_data.RData")
View(parcel_centers.coords)
parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(y = {subset(parcel_centers.coords, select = c(APN, address))}, by = "APN")
View(parcel_data.shape@data)
parcel_data.shape <- data.shape
parcel_data.shape@data <- parcel_data.shape@data %>% subset(select = APN)
parcel_data.shape@data <- parcel_data.shape@data %>% left_join(parcel_data, by = "APN") %>% left_join(y = {subset(parcel_centers.coords, select = c(APN, address))}, by = "APN")
View(parcel_data.shape@data)
save(parcel_data, file = "parcel_data.RData")
save(parcel_data.shape, file = "parcel_data.RData")
View(parcel_data.shape@data)
